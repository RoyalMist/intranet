name: CI

on:
  push:
    branches: [master]
    tags:
      - "*"
  pull_request:
    branches: [master]

env:
  ELIXIR_VERSION: 1.13
  OTP_VERSION: 24.1

jobs:
  dependencies:
    name: Dependencies
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Elixir Setup
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      - name: Rust Setup
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v2
        id: mix-deps-cache
        with:
          path: |
            deps
            _build
          key: deps-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Install Dependencies
        if: steps.mix-deps-cache.outputs.cache-hit != 'true'
        run: mix do deps.get, deps.compile
      - name: Retrieve Cached PLT
        uses: actions/cache@v2
        id: mix-plt-cache
        with:
          path: |
            priv/plts
          key: plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Install PLT
        if: steps.mix-plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt

  analysis:
    name: Static Code Analysis
    needs: dependencies
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v2
        id: mix-deps-cache
        with:
          path: |
            deps
            _build
          key: deps-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Retrieve Cached PLT
        uses: actions/cache@v2
        id: mix-plt-cache
        with:
          path: |
            priv/plts
          key: plt-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Check Code Format
        run: mix format --check-formatted
      - name: Run Credo
        run: mix credo
      - name: Run Dialyzer
        run: mix dialyzer --format dialyxir
      - name: Run Sobelow
        run: mix sobelow

  tests:
    name: Unit Tests
    needs: dependencies
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: test
    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Install packages
        run: sudo apt update && sudo apt install imagemagick webp wkhtmltopdf
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      - name: Rust Setup
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v2
        id: mix-deps-cache
        with:
          path: |
            deps
            _build
          key: deps-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Run test
        run: mix test --trace --slowest 10

  build:
    name: Build
    if: github.ref == 'refs/heads/master'
    needs:
      - analysis
      - tests
    runs-on: ubuntu-20.04
    steps:
      - name: Tag
        id: tagName
        uses: olegtarasov/get-tag@v2.1
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Nightly
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_IMAGE }}:latest
      - name: Versioned
        if: ${{ contains(github.ref, 'refs/tags/') }}
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_IMAGE }}:${{ steps.tagName.outputs.tag }}
